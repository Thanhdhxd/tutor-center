# Tutor Center API Backend

## Cấu trúc Entity Framework

Dự án này được tổ chức theo mô hình clean architecture với việc tách biệt các Fluent API configurations.

### Thư mục cấu trúc:
- **Entities/**: Chứa tất cả các entity classes được tạo tự động từ database
- **DbContexts/**: Chứa DbContext classes
- **Configurations/**: Chứa các IEntityTypeConfiguration cho từng entity
- **Extensions/**: Chứa extension methods hữu ích

### Cách sử dụng:

#### 1. Entity Framework Setup
```csharp
// Program.cs
builder.Services.AddDbContext<TutorCenterDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
```

#### 2. Tạo Configuration cho Entity mới
Khi bạn cần tạo configuration cho một entity mới, hãy tạo file trong thư mục `Configurations/`:

```csharp
// Configurations/YourEntityConfiguration.cs
using api_backend.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace api_backend.Configurations
{
    public class YourEntityConfiguration : IEntityTypeConfiguration<YourEntity>
    {
        public void Configure(EntityTypeBuilder<YourEntity> builder)
        {
            builder.HasKey(e => e.Id);
            builder.Property(e => e.Name).HasMaxLength(100);
            // ... các cấu hình khác
        }
    }
}
```

#### 3. Cấu hình tự động
Tất cả các configuration sẽ được áp dụng tự động thông qua `ApplyConfigurationsFromAssembly()` trong `TutorCenterDbContext`.

### Scaffold Entity từ Database

Để cập nhật entities từ database:

```bash
dotnet ef dbcontext scaffold "Server=.;Database=TutorCenterDb;Trusted_Connection=True;MultipleActiveResultSets=true;TrustServerCertificate=true" Microsoft.EntityFrameworkCore.SqlServer -o Entities -c TutorCenterDbContext -f --context-dir DbContexts
```

### Các Configuration đã được tạo (9 files):
- ✅ **UserConfiguration** - Cấu hình cho bảng Users
- ✅ **ClassroomConfiguration** - Cấu hình cho bảng Classrooms
- ✅ **RoleConfiguration** - Cấu hình cho bảng Roles (bao gồm many-to-many với Permissions)
- ✅ **PermissionConfiguration** - Cấu hình cho bảng Permissions
- ✅ **MediumConfiguration** - Cấu hình cho bảng Media
- ✅ **QuizConfiguration** - Cấu hình cho bảng Quizzes
- ✅ **LessonConfiguration** - Cấu hình cho bảng Lessons
- ✅ **ExerciseConfiguration** - Cấu hình cho bảng Exercises
- ✅ **PaymentTransactionConfiguration** - Cấu hình cho bảng PaymentTransactions

### Entities chưa có Configuration riêng:
Các entity sau vẫn được cấu hình trong `ConfigureRemainingEntities()` method của `TutorCenterDbContext`:

**AI-related entities:**
- Aiagent, Aiconversation, Aimessage, AimessageMedia

**Communication entities:**
- Announcement
- ClassroomChatMessage, ClassroomChatMessageMedia

**Student-related entities:**
- ClassroomStudent, JoinRequest

**Assignment entities:**
- ExerciseSubmission, Material

**Quiz sub-entities:**
- QuizAnswer, QuizAttempt, QuizOption, QuizQuestion, QuizSection
- QuizQuestionGroup, QuizQuestionGroupMedia, QuizQuestionMedia, QuizOptionMedia

**System entities:**
- Report

### Hướng dẫn tạo Configuration mới:

1. **Tạo file mới** trong thư mục `Configurations/`
2. **Implement IEntityTypeConfiguration<T>**
3. **Di chuyển cấu hình** từ `ConfigureRemainingEntities()` vào file mới
4. **Configuration sẽ tự động được load** nhờ `ApplyConfigurationsFromAssembly()`

Ví dụ tạo configuration cho Announcement:

```csharp
// Configurations/AnnouncementConfiguration.cs
public class AnnouncementConfiguration : IEntityTypeConfiguration<Announcement>
{
    public void Configure(EntityTypeBuilder<Announcement> builder)
    {
        builder.HasKey(e => e.AnnouncementId).HasName("PK__Announce__9DE445740D919A96");
        builder.Property(e => e.CreatedAt).HasPrecision(0).HasDefaultValueSql("(sysutcdatetime())");
        builder.Property(e => e.Title).HasMaxLength(200);
        
        builder.HasOne(d => d.Classroom).WithMany(p => p.Announcements)
            .HasForeignKey(d => d.ClassroomId)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK__Announcem__Class__01142BA1");
            
        builder.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Announcements)
            .HasForeignKey(d => d.CreatedBy)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK__Announcem__Creat__02084FDA");
    }
}
```

### Lưu ý:
- Connection string được cấu hình trong `appsettings.json`
- Sử dụng `TutorCenterDbContext` trực tiếp để đơn giản hóa cấu trúc
- Sử dụng `ApplyConfigurationsFromAssembly()` để tự động load tất cả configurations
- **File configuration trống đã được xóa** để giữ codebase sạch sẽ
- Chỉ tạo configuration file khi thực sự cần thiết

### Build Status:
✅ Project builds successfully  
✅ All configurations are working properly  
✅ No empty configuration files  
✅ Simplified DbContext usage