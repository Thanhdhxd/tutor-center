import { NextResponse } from "next/server"
import type { NextRequest } from "next/server"

// T√°ch constants ra ngo√†i ƒë·ªÉ d·ªÖ b·∫£o tr√¨
const PROTECTED_ROUTES = ["/dashboard"]
const AUTH_ROUTES = ["/login", "/register"]

export function middleware(request: NextRequest) {
  const token = request.cookies.get("access_token")?.value // üëà ƒë·ªìng b·ªô v·ªõi LOCAL_KEYS

  const { pathname } = request.nextUrl

  const isProtectedRoute = PROTECTED_ROUTES.some((route) =>
    pathname.startsWith(route)
  )

  const isAuthRoute = AUTH_ROUTES.some((route) => pathname.startsWith(route))

  // N·∫øu v√†o route c·∫ßn b·∫£o v·ªá m√† kh√¥ng c√≥ token ‚Üí redirect login
  if (isProtectedRoute && !token) {
    const loginUrl = new URL("/login", request.url)
    loginUrl.searchParams.set("redirect", pathname) // gi·ªØ redirect ƒë·ªÉ login xong quay l·∫°i
    return NextResponse.redirect(loginUrl)
  }

  // N·∫øu v√†o login/register m√† ƒë√£ c√≥ token ‚Üí redirect dashboard
  if (isAuthRoute && token) {
    return NextResponse.redirect(new URL("/dashboard", request.url))
  }

  return NextResponse.next()
}

export const config = {
  matcher: ["/dashboard/:path*", "/login", "/register"],
}
